#!/bin/bash
#
# Configures the collectd daemon.
# Source functions library
. /etc/init.d/functions
. /usr/libexec/ovirt-functions

trap '__st=$?; stop_log; exit $__st' 0
trap 'exit $?' 1 2 13 15

collectd_conf="/etc/collectd.conf"

# Creates the collectd file based on the following inputs
# $1 ipaddress of remote collectd server
# $2 port of remote collectd server
# TODO implement and use Augeas lens
ovirt_collectd() {
    local collectd_server=$1
    local collectd_port=$2

    start_log
    if [ -f $collectd_conf.in ]; then
        sed -e "s/@COLLECTD_SERVER@/$collectd_server/" \
            -e "s/@COLLECTD_PORT@/$collectd_port/" $collectd_conf.in \
            > $collectd_conf
        if [ $? -ne 0 ]; then
            echo "Failed to write $collectd_conf"; return 1
        fi
    fi

    chkconfig collectd on
    service collectd restart
    stop_log
}

prompt_user() {
    while true ; do
        collectd_server_ip=""
        collectd_server_port=""

        read -p "Please enter the IP address for the collectd server: "
        if [ -n "$REPLY" ]; then
            collectd_server_ip=$REPLY
            while true; do
                read -p "Please enter the collectd port used: "
                r=$REPLY
                if [ -n "$r" ]; then
                    if [[ $r =~ ^[0-9]+$ ]] && [[ $r -gt 0 ]]; then
	                    collectd_server_port=$REPLY
	                    break
                    else
                        printf "Invalid port.\n"
                    fi
                fi
            done
        else
            printf "\nDisabling remote collectd.\n"
        fi

        printf "\n"
        printf "\nCollectd will be configured as follows:"
        printf "\n======================================"
        if [ -n "$collectd_server_ip" ]; then
            printf "\n    Remote Server: $collectd_server_ip"
            printf "\n      Remote Port: $collectd_server_port"
        fi
        printf "\n"
        printf "\n"
        while true; do
            ask_yes_or_no "Is this correct ([Y]es/[N]o/[A]bort)?" true true
            rc=$?
            case $rc in
                0)
                    printf "\nSaving configuration.\n"
                    if [[ -n "$collectd_server_ip" ]] &&
                        [[ -n "$collectd_server_port" ]]; then
                        ovirt_collectd $collectd_server_ip \
                            $collectd_server_port
                    fi
                    return
                    ;;

                1)
                    printf "\nRestarting collectd configuration.\n"
                    break
                    ;;
                2)
                    printf "\nAborting collectd configuration.\n"
                    return
                    ;;
            esac
        done
    done
}

# AUTO for auto-install
if [ "$1" = "AUTO" ]; then
    if [ -z "$OVIRT_COLLECTD_SERVER" -o -z "$OVIRT_COLLECTD_PORT" ]; then
        printf "\nAttempting to locate remote collectd server..."
        find_srv collectd udp
        if [ -n "$SRV_HOST" -a -n "$SRV_PORT" ]; then
            printf "found! Using collectd server '$SRV_HOST:$SRV_PORT'.\n"
            ovirt_collectd $SRV_HOST $SRV_PORT
        else
            printf "not found!\n"
        fi
    else
        printf "\nUsing default collectd server '$OVIRT_COLLECTD_SERVER:$OVIRT_COLLECTD_PORT'.\n"
        ovirt_collectd $OVIRT_COLLECTD_SERVER $OVIRT_COLLECTD_PORT
    fi
else
    printf "\n\n Collectd Configuration\n\n"
    prompt_user
fi
